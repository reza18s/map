// File: src/app/providers.tsx
"use client";
import { NextUIProvider } from "@nextui-org/react";

export function Providers({ children }: { children: React.ReactNode }) {
  return <NextUIProvider>{children}</NextUIProvider>;
}

// File: src/app/layout.tsx
import { Inter } from "next/font/google";
import { Providers } from "./providers";
import "./globals.css";
import "../css/style.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Map",
  description: "Map Selector by shahyad karimi",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}

// File: src/app/api/settings/route.ts
import connectDB from "@/configs/db";
import SettingsModel from "@/models/SettingsModel";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    await connectDB();
    const body = await req.json();
    const { lat, lng, zoom } = body;

    await SettingsModel.findOneAndUpdate(
      { _id: "66c3774a9757762530e4bfd1" },
      { $set: { lat, lng, zoom } },
    );

    return NextResponse.json(
      { message: "Point updated successfully!" },
      { status: 200 },
    );
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

export async function GET() {
  try {
    await connectDB();
    const settings = await SettingsModel.findOne(
      { _id: "66c3774a9757762530e4bfd1" },
      "-__v",
    );
    return NextResponse.json(settings);
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

// File: src/app/api/points/route.ts
import connectDB from "@/configs/db";
import MapModel from "@/models/MapModel";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    await connectDB();
    const body = await req.json();
    const { lat, lng, date, deletedAt, name, frequency } = body;

    const points = await MapModel.create({
      lat,
      lng,
      date,
      name,
      frequency,
      deletedAt,
    });
    return NextResponse.json(
      { message: "Point created successfully!", points },
      { status: 200 },
    );
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

export async function GET() {
  try {
    await connectDB();
    const points = await MapModel.find({ deletedAt: null }, "-__v");
    return NextResponse.json(points);
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

export async function DELETE(req: Request) {
  try {
    await connectDB();
    const body = await req.json();
    const { id } = body;

    await MapModel.findOneAndUpdate(
      { _id: id },
      { $set: { deletedAt: new Date() } },
    );
    return NextResponse.json({ message: "Point deleted successfully!" });
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

// File: src/app/api/points/search/route.ts
import connectDB from "@/configs/db";
import MapModel from "@/models/MapModel";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    await connectDB();
    const body = await req.json();
    const { search } = body;

    const points = await MapModel.find({ name: search, deletedAt: null });
    return NextResponse.json(points);
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

// File: src/app/api/points/update-point/route.ts
import connectDB from "@/configs/db";
import MapModel from "@/models/MapModel";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    await connectDB();
    const body = await req.json();
    const { name, lat, lng, frequency, id } = body;

    await MapModel.findOneAndUpdate(
      { _id: id },
      { $set: { name, lat, lng, frequency } },
    );
    return NextResponse.json({ message: "Point updated!" });
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

// File: src/app/api/points/change-status/route.ts
import connectDB from "@/configs/db";
import MapModel from "@/models/MapModel";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    await connectDB();
    const body = await req.json();
    const { id } = body;

    const point = await MapModel.findOne({ _id: id });
    await MapModel.findOneAndUpdate(
      { _id: id },
      { $set: { status: point?.status === "active" ? "disable" : "active" } },
    );

    return NextResponse.json({ message: "Point status updated!" });
  } catch (err) {
    return NextResponse.json({ message: err }, { status: 500 });
  }
}

// File: src/app/page.tsx
// File: src/app/page.tsx
"use client";
import dynamic from "next/dynamic";
import { useAppStore } from "@/store/store"; // Import the Zustand store
import { useEffect } from "react";

const Map = dynamic(() => import("@/components/map/Map"), {
  ssr: false,
});
const Sidebar = dynamic(() => import("@/components/sidebar/Sidebar"), {
  ssr: false,
});

export default function Home() {
  const {
    addPointModal,
    setAddPointModal,
    showPointList,
    setShowPointList,
    points,
    setPoints,
  } = useAppStore();

  useEffect(() => {
    // Fetch points data and update the store
    // Example: fetchPoints().then((data) => setPoints(data));
  }, []);

  return (
    <div className="flex h-screen w-full items-center">
      <Sidebar
        addPointModal={addPointModal}
        setAddPointModal={setAddPointModal}
        showPointList={showPointList}
        setShowPointList={setShowPointList}
      />
      <Map
        addPointModal={addPointModal}
        setAddPointModal={setAddPointModal}
        showPointList={showPointList}
        setShowPointList={setShowPointList}
        points={points}
      />
    </div>
  );
}

// File: src/app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

// File: src/helper/helper.ts
export const dateFormatter = (
  date: {
    start: { day: number; month: number; year: number };
    end: { day: number; month: number; year: number };
  },
  time: { hour: number; minute: number },
) => {
  return {
    start: `${date.start.month}/${date.start.day}/${date.start.year} ${time.hour}:${time.minute}`,
    end: `${date.end.month}/${date.end.day}/${date.end.year} ${time.hour}:${time.minute}`,
  };
};

// File: src/helper/offline.ts
/* global L, LeafletOffline, $ */

const urlTemplate = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png";

// Show tile list function
function showTileList(): void {
  // @ts-expect-error the
  LeafletOffline.getStorageInfo(urlTemplate).then((r: any[]) => {
    const list = document.getElementById("tileinforows");
    if (list) {
      list.innerHTML = "";
      r.forEach((tile: any, i: number) => {
        const createdAt = new Date(tile.createdAt);
        list.insertAdjacentHTML(
          "beforeend",
          `<tr><td>${i}</td><td>${tile.url}</td><td>${tile.key}</td><td>${createdAt.toDateString()}</td></tr>`,
        );
      });
    }
  });
}

// @ts-expect-error the
$("#storageModal").on("show.bs.modal", showTileList);

// Initialize map and base layer
const map = L.map("map");
const baseLayer = L.tileLayer
  .offline(urlTemplate, {
    attribution: "Map data {attribution.OpenStreetMap}",
    subdomains: "abc",
    minZoom: 13,
  } as L.TileLayerOptions)
  .addTo(map);

// Set up tile saving controls
const control = L.control.savetiles(baseLayer, {
  zoomlevels: [13, 16],
  confirm: (layer: any, successCallback: () => void): void => {
    if (window.confirm(`Save ${layer._tilesforSave.length}`)) {
      successCallback();
    }
  },
  confirmRemoval: (layer: any, successCallback: () => void): void => {
    if (window.confirm("Remove all the tiles?")) {
      successCallback();
    }
  },
});

control.addTo(map);

// Set map view
map.setView({ lat: 51.985, lng: 5 }, 16);

// Add layers to map
const layerswitcher = L.control
  // @ts-expect-error the
  .layers({ "osm (offline)": baseLayer }, null, { collapsed: false })
  .addTo(map);

// GeoJSON storage layer
let storageLayer: L.GeoJSON;

// Get stored GeoJSON data
const getGeoJsonData = (): Promise<L.GeoJSON> =>
  // @ts-expect-error the
  LeafletOffline.getStorageInfo(urlTemplate).then((data: any) =>
    // @ts-expect-error the
    LeafletOffline.getStoredTilesAsJson(baseLayer, data),
  );

// Add storage layer to the map
const addStorageLayer = (): void => {
  getGeoJsonData().then((geojson: any) => {
    storageLayer = L.geoJSON(geojson).bindPopup(
      (clickedLayer: any) => clickedLayer.feature.properties.key,
    );
    layerswitcher.addOverlay(storageLayer, "stored tiles");
  });
};

addStorageLayer();

// Event listener to remove tiles
document.getElementById("remove_tiles")?.addEventListener("click", () => {
  (control as any)._rmTiles(); // Assuming _rmTiles is a method without typing in the library
});

// Update storage size event
baseLayer.on("storagesize", (e: any) => {
  document.getElementById("storage")!.innerHTML = e.storagesize.toString();
  if (storageLayer) {
    storageLayer.clearLayers();
    getGeoJsonData().then((data: any) => {
      storageLayer.addData(data);
    });
  }
});

// Progress tracking for saving tiles
let progress: number;
baseLayer.on("savestart", (e: any) => {
  progress = 0;
  document.getElementById("total")!.innerHTML =
    e._tilesforSave.length.toString();
});
baseLayer.on("savetileend", () => {
  progress += 1;
  document.getElementById("progress")!.innerHTML = progress.toString();
});

// File: src/store/store.ts
import { create } from "zustand";

interface AppState {
  addPointModal: boolean;
  setAddPointModal: (value: boolean) => void;
  showPointList: boolean;
  setShowPointList: (value: boolean) => void;
  points: any[];
  setPoints: (points: any[]) => void;
}

export const useAppStore = create<AppState>((set) => ({
  addPointModal: false,
  setAddPointModal: (value) => set(() => ({ addPointModal: value })),
  showPointList: false,
  setShowPointList: (value) => set(() => ({ showPointList: value })),
  points: [],
  setPoints: (points) => set(() => ({ points })),
}));

// File: src/css/style.css
.leaflet-container,
.leaflet {
  width: 100%;
  height: 100%;
}

@keyframes spinner {
  0% {
    transform: rotate(0);
  }

  100% {
    transform: rotate(360deg);
  }
}

.spinner-anim {
  animation: spinner 1s infinite;
}

.leaflet-right {
  display: none;
}

// File: src/types/index.ts
export interface PointData {
  _id: string;
  name: string;
  lat: number;
  lng: number;
  frequency: string;
  status: "active" | "disable";
  date: string;
}

export interface Settings {
  lat: number;
  lng: number;
  zoom: number;
}

export interface FormData {
  name: string;
  lat: string;
  lng: string;
  frequency: string;
  lat_settings?: string;
  lng_settings?: string;
  zoom?: string;
  search?: string;
}

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: FormData) => void;
  loading: boolean;
  initialData?: FormData;
}

export interface MapComponentProps {
  points: PointData[];
  settings: Settings;
  onMarkerClick: (point: PointData) => void;
}

// File: src/types/leaflet-offline.d.ts
import "leaflet";

declare module "leaflet" {
  namespace tileLayer {
    function offline(
      urlTemplate: string,
      options?: L.TileLayerOptions,
    ): L.TileLayer;
  }

  namespace control {
    function savetiles(layer: L.TileLayer, options: any): L.Control;
  }
}

interface LeafletOffline {
  getStorageInfo(urlTemplate: string): Promise<any[]>;
  getStoredTilesAsJson(layer: L.TileLayer, data: any[]): Promise<L.GeoJSON>;
}
declare module "leaflet" {
  interface LeafletEvent {
    _tilesforSave?: any[]; // Define the custom property _tilesforSave, change `any[]` to a more specific type if known
  }
}

// File: src/components/map/Table.tsx
import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableColumn,
  TableHeader,
  TableRow,
  Tooltip,
} from "@nextui-org/react";
import { PointData } from "@/types";
import { EditIcon } from "./EditIcon";
import { DeleteIcon } from "./DeleteIcon";

interface TableComponentProps {
  pointsList: PointData[];
  onEditClick: (point: PointData) => void;
  onDeleteClick: (id: string) => void;
}

const Tables: React.FC<TableComponentProps> = ({
  pointsList,
  onEditClick,
  onDeleteClick,
}) => {
  const columns = [
    { name: "ID", uid: "id" },
    { name: "Name", uid: "name" },
    { name: "Latitude", uid: "lat" },
    { name: "Longitude", uid: "lng" },
    { name: "Frequency", uid: "frequency" },
    { name: "Status", uid: "status" },
    { name: "Date", uid: "date" },
    { name: "Actions", uid: "actions" },
  ];

  const renderCell = (point: PointData, columnKey: string) => {
    switch (columnKey) {
      case "actions":
        return (
          <div>
            <Tooltip content="Edit">
              <button onClick={() => onEditClick(point)}>
                <EditIcon />
              </button>
            </Tooltip>
            <Tooltip content="Delete">
              <button onClick={() => onDeleteClick(point._id)}>
                <DeleteIcon />
              </button>
            </Tooltip>
          </div>
        );
      default:
        return <span>{point[columnKey as keyof PointData]}</span>;
    }
  };

  return (
    <Table>
      <TableHeader columns={columns}>
        {(column) => (
          <TableColumn key={column.uid} align="center">
            {column.name}
          </TableColumn>
        )}
      </TableHeader>
      <TableBody items={pointsList}>
        {(item) => (
          <TableRow key={item._id}>
            {(columnKey) => (
              <TableCell>{renderCell(item, columnKey)}</TableCell>
            )}
          </TableRow>
        )}
      </TableBody>
    </Table>
  );
};

export default Tables;

// File: src/components/map/MapComponent.tsx
import React from "react";
import { MapContainer, Marker, Popup, TileLayer } from "react-leaflet";
import "leaflet.offline";
import "leaflet/dist/leaflet.css";
import { PointData, Settings } from "@/types";

interface MapComponentProps {
  points: PointData[];
  settings: Settings;
  onMarkerClick: (point: PointData) => void;
}

const MapComponent: React.FC<MapComponentProps> = ({
  points,
  settings,
  onMarkerClick,
}) => {
  return (
    <MapContainer
      center={[settings.lat, settings.lng]}
      zoom={settings.zoom}
      scrollWheelZoom={true}
    >
      <TileLayer
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
      />
      {points.map((point) => (
        <Marker key={point._id} position={[point.lat, point.lng]}>
          <Popup>{point.name}</Popup>
        </Marker>
      ))}
    </MapContainer>
  );
};

export default MapComponent;

// File: src/components/map/DeleteIcon.tsx
import React from "react";

export const DeleteIcon = () => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 20 20"
    width="1em"
  >
    <path
      d="M17.5 4.98332C14.725 4.70832 11.9333 4.56665 9.15 4.56665C7.5 4.56665 5.85 4.64998 4.2 4.81665L2.5 4.98332"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M7.08331 4.14169L7.26665 3.05002C7.39998 2.25835 7.49998 1.66669 8.90831 1.66669H11.0916C12.5 1.66669 12.6083 2.29169 12.7333 3.05835L12.9166 4.14169"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M15.7084 7.61664L15.1667 16.0083C15.075 17.3166 15 18.3333 12.675 18.3333H7.32502C5.00002 18.3333 4.92502 17.3166 4.83335 16.0083L4.29169 7.61664"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M8.60834 13.75H11.3833"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
    <path
      d="M7.91669 10.4167H12.0834"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={1.5}
    />
  </svg>
);

// File: src/components/map/Map.tsx
/* eslint-disable react-hooks/exhaustive-deps */
import React, { useEffect, useState } from "react";
import { MapContainer, Marker, Popup, TileLayer } from "react-leaflet";
import L from "leaflet";
import "leaflet.offline";
import "leaflet/dist/leaflet.css";
import {
  Button,
  Chip,
  DateRangePicker,
  Input,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
  Spinner,
  Table,
  TableBody,
  TableCell,
  TableColumn,
  TableHeader,
  TableRow,
  TimeInput,
  Tooltip,
} from "@nextui-org/react";
import { deleteData, getData, postData } from "@/services/API";
import { PointIcon } from "./PointIcon";
import { useForm } from "react-hook-form";
import { EditIcon } from "./EditIcon";
import { DeleteIcon } from "./DeleteIcon";
import { dateFormatter } from "@/helper/helper";

// table columns
const columns = [
  { name: "id", uid: "id" },
  { name: "name", uid: "name" },
  { name: "lat", uid: "lat" },
  { name: "lng", uid: "lng" },
  { name: "frequency", uid: "frequency" },
  { name: "status", uid: "status" },
  { name: "time", uid: "time" },
  { name: "", uid: "action" },
];

const statusColorMap = {
  active: "success",
  disable: "danger",
};
interface MapProps {
  addPointModal: boolean;
  setAddPointModal: (value: boolean) => void;
  showPointList: boolean;
  setShowPointList: (value: boolean) => void;
}
export default function Map({
  addPointModal,
  setAddPointModal,
  showPointList,
}: MapProps) {
  const {
    register,
    handleSubmit,
    setValue,
    watch,
    reset,
    formState: { errors },
  } = useForm({
    mode: "onBlur",
    defaultValues: {
      name: "",
      lat: "",
      lng: "",
      frequency: "",
      lat_settings: "",
      lng_settings: "",
      zoom: "",
      search: "",
    },
  });

  const [position, setPosition] = useState<[number][]>([]);
  const [loading, setLoading] = useState(true);
  const [rotateIcon, setRotateIcon] = useState(false);
  const [points, setPoints] = useState([]);
  const [pointsList, setPointsList] = useState([]);
  const [addPointLoading, setAddPointLoading] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);
  const [deleteLoading, setDeleteLoading] = useState(false);
  const [pointId, setPointId] = useState("");
  const [statusLoading, setStatusLoading] = useState(false);
  const [editModal, setEditModal] = useState(false);
  const [editLoading, setEditLoading] = useState(false);
  const [settings, setSettings] = useState({});
  const [settingsModal, setSettingsModal] = useState(false);
  const [settingsLoading, setSettingsLoading] = useState(true);
  const [settingsUpdateLoading, setSettingsUpdateLoading] = useState(false);
  const [pointLabel, setPointLabel] = useState({});
  const [once, setOnce] = useState(true);
  const [map, setMap] = useState();
  const [progress, setProgress] = useState(0);
  const [total, setTotal] = useState(0);
  const [date, setDate] = useState({});
  const searchVal = watch("search");
  const [from, setFrom] = useState("");
  const [to, setTo] = useState("");

  // get all points
  const getSettings = () => {
    getData("/api/settings", {})
      .then((res) => {
        setSettings(res.data);
        setSettingsLoading(false);

        // action after update
        setSettingsModal(false);
        setSettingsUpdateLoading(false);
      })
      .catch(() => {
        setSettingsLoading(false);
      });
  };

  // get all points
  const getAllPoints = () => {
    setLoading(true);

    // action after updates(add, edit, change status & delete points)
    setDeleteLoading(false);
    setDeleteModal(false);
    setStatusLoading(false);
    setAddPointModal(false);
    setAddPointLoading(false);
    setEditModal(false);
    setEditLoading(false);

    getData("/api/points", {})
      .then((res) => {
        setPoints(res.data);
        setPointsList(res.data);
        res.data.length > 0 && setPosition([res.data[0].lat, res.data[0].lng]);
        setLoading(false);
        setRotateIcon(false);
      })
      .catch((err) => {
        console.log(err);
        setLoading(false);
      });
  };

  useEffect(() => {
    if (once) {
      setOnce(false);
      // get all points
      getAllPoints();

      // get settings data
      getSettings();
    }

    if (map) {
      const tileLayerOffline = L.tileLayer.offline(
        "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        {
          attribution:
            '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
          subdomains: "abc",
          minZoom: 11,
          maxZoom: 16,
        },
      );

      tileLayerOffline.addTo(map);

      const controlSaveTiles = L.control.savetiles(tileLayerOffline, {
        zoomlevels: [11, 12, 13, 14, 15, 16], // optional zoomlevels to save, default current zoomlevel
        confirm(layer: any, succescallback: () => void) {
          // eslint-disable-next-line no-alert
          if (
            window.confirm(
              `Are you shure you want download ${layer._tilesforSave.length} tiles ?`,
            )
          ) {
            succescallback();
          }
        },
        confirmRemoval(layer: any, successCallback: () => void) {
          // eslint-disable-next-line no-alert
          if (window.confirm("Are you shure you want remove all the tiles?")) {
            successCallback();
          }
        },
        saveText: `<div class="w-full h-full flex justify-center items-center">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="size-5"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3"
            />
          </svg>
        </div>`,
        rmText: `<div class="w-full h-full flex justify-center items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="size-5"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
              />
            </svg>
          </div>`,
      });

      controlSaveTiles.addTo(map);

      let progress: number;
      baseLayer.on("savestart", (e: L.LeafletEvent) => {
        if (e._tilesforSave) {
          progress = 0;
          document.getElementById("total")!.innerHTML =
            e._tilesforSave.length.toString();
        }
      });
      tileLayerOffline.on("savetileend", () => {
        progress += 1;
        setProgress(progress);
      });
    }
  }, [map]);

  // data table custom cell
  const renderCell = (point, columnKey, id: string) => {
    const cellValue = point[columnKey];

    switch (columnKey) {
      case "id":
        return <span>{id}</span>;
      case "name":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm text-gray-700">{point.name}</p>
          </div>
        );

      case "lat":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm text-gray-700">{point.lat}</p>
          </div>
        );
      case "lng":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm text-gray-700">{point.lng}</p>
          </div>
        );
      case "z":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm text-gray-700">{point.frequency}</p>
          </div>
        );

      case "status":
        return (
          <button onClick={() => changeStatusHandler(point._id)}>
            <Chip
              className="capitalize"
              color={statusColorMap[point.status]}
              size="sm"
              variant="flat"
            >
              {statusLoading ? "wait..." : cellValue}
            </Chip>
          </button>
        );

      case "time":
        return (
          <div className="flex flex-col">
            <p className="text-bold text-sm capitalize text-gray-700">
              {new Date(point.date).toLocaleString()}
            </p>
          </div>
        );
      case "action":
        return (
          <div className="relative flex items-center gap-4">
            <Tooltip content="edit point">
              <button
                onClick={() => setPointEditableData(point)}
                className="cursor-pointer text-lg text-default-400 active:opacity-50"
              >
                <EditIcon />
              </button>
            </Tooltip>

            <Tooltip color="danger" content="delete point">
              <button
                onClick={() => {
                  setDeleteModal(true);
                  setPointId(point._id);
                }}
                className="cursor-pointer text-lg text-danger active:opacity-50"
              >
                <DeleteIcon />
              </button>
            </Tooltip>
          </div>
        );
      default:
        return cellValue;
    }
  };

  // add point handler
  const addPointHandler = (data) => {
    setAddPointLoading(true);

    postData("/api/points", { ...data }).then((res) => {
      // refresh point data table
      getAllPoints();
      reset({ name: "", lat: "", lng: "", frequency: "" });
    });
  };

  // delete single point
  const deletePointHandler = () => {
    setDeleteLoading(true);

    deleteData("/api/points", { id: pointId }).then((res) => {
      // refresh point data table
      getAllPoints();
    });
  };

  // change point status, show in map or not
  const changeStatusHandler = (id) => {
    setStatusLoading(true);

    postData("/api/points/change-status", { id }).then((res) => {
      // refresh point data table
      getAllPoints();
    });
  };

  // set current data in inputes
  const setPointEditableData = (point) => {
    setEditModal(true);

    setPointId(point._id);
    setValue("name", point.name);
    setValue("lat", point.lat);
    setValue("lng", point.lng);
    setValue("frequency", point.frequency);
  };

  // close edit modal & clear inputes
  const closeEditModalHandler = () => {
    setEditModal(false);
    setPointId("");
    reset({ name: "", lat: "", lng: "", frequency: "" });
  };

  // edit point handler
  const editPointHandler = (data) => {
    setEditLoading(true);

    postData("/api/points/update-point", { ...data, id: pointId }).then(
      (res) => {
        // refresh point data table
        getAllPoints();

        // close modal & clear inputes
        closeEditModalHandler();
      },
    );
  };

  //open settings modal & set defualt data in settings input
  const openSettingsModal = () => {
    setSettingsModal(true);
    setValue("lat_settings", settings.lat);
    setValue("lng_settings", settings.lng);
    setValue("zoom", settings.zoom);
  };

  // update settings data handler
  const updateSettingsHandler = (data) => {
    setSettingsUpdateLoading(true);

    postData("/api/settings", {
      lat: data.lat_settings,
      lng: data.lng_settings,
      zoom: data.zoom,
    })
      .then((res) => {
        setSettingsUpdateLoading(false);
        window.location.reload();
        getSettings();
      })
      .catch((err) => {
        setSettingsLoading(false);
      });
  };

  // search points
  const searchPointsHandler = () => {
    const filteredPoints = points.filter((data) =>
      data.name.toLowerCase().includes(searchVal?.toLowerCase()),
    );

    setPointsList(filteredPoints);
  };

  const sortByDateHandler = () => {
    const startDate = new Date(dateFormatter(date, from).start);
    const endDate = new Date(dateFormatter(date, to).end);

    const result = points.filter((point) => {
      const date = new Date(point.date);
      return date >= startDate && date <= endDate;
    });

    setPointsList(result);
  };

  return (
    <div className="flex size-full flex-col">
      {/* add new point modal */}
      <Modal
        classNames={{ backdrop: "z-[999]", wrapper: "z-[9999]" }}
        isOpen={addPointModal}
        onClose={() => setAddPointModal(false)}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Add new point
              </ModalHeader>
              <ModalBody>
                <div className="flex w-full flex-col gap-4">
                  <Input
                    isRequired
                    label="Name"
                    labelPlacement="outside"
                    placeholder="Enter point name"
                    isInvalid={!!errors.name}
                    errorMessage="name is required"
                    {...register("name", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Lat"
                    labelPlacement="outside"
                    placeholder="Enter point lat"
                    isInvalid={!!errors.lat}
                    errorMessage="lat is required"
                    {...register("lat", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Lng"
                    labelPlacement="outside"
                    placeholder="Enter point lng"
                    isInvalid={!!errors.lng}
                    errorMessage="lng is required"
                    {...register("lng", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Frequency"
                    labelPlacement="outside"
                    placeholder="Enter point frequency"
                    isInvalid={!!errors.frequency}
                    errorMessage="frequency is required"
                    {...register("frequency", { required: true })}
                  />
                </div>
              </ModalBody>
              <ModalFooter>
                <div className="flex w-full justify-center gap-4">
                  <Button
                    color="danger"
                    variant="light"
                    onClick={() => setAddPointModal(false)}
                  >
                    Close
                  </Button>
                  <Button
                    isLoading={addPointLoading}
                    variant="shadow"
                    className="bg-green-600 text-white shadow-green-200"
                    onClick={handleSubmit(addPointHandler)}
                  >
                    Add point
                  </Button>
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* edit point modal */}
      <Modal
        classNames={{ backdrop: "z-[999]", wrapper: "z-[9999]" }}
        isOpen={editModal}
        onClose={closeEditModalHandler}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Edit Point
              </ModalHeader>
              <ModalBody>
                <div className="flex w-full flex-col gap-4">
                  <Input
                    isRequired
                    label="Name"
                    labelPlacement="outside"
                    placeholder="Enter point name"
                    isInvalid={!!errors.name}
                    errorMessage="name is required"
                    {...register("name", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Lat"
                    labelPlacement="outside"
                    placeholder="Enter point lat"
                    isInvalid={!!errors.lat}
                    errorMessage="lat is required"
                    {...register("lat", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Lng"
                    labelPlacement="outside"
                    placeholder="Enter point lng"
                    isInvalid={!!errors.lng}
                    errorMessage="lng is required"
                    {...register("lng", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Frequency"
                    labelPlacement="outside"
                    placeholder="Enter point frequency"
                    isInvalid={!!errors.frequency}
                    errorMessage="frequency is required"
                    {...register("frequency", { required: true })}
                  />
                </div>
              </ModalBody>
              <ModalFooter>
                <div className="flex w-full justify-center gap-4">
                  <Button
                    color="danger"
                    variant="light"
                    onClick={closeEditModalHandler}
                  >
                    Close
                  </Button>
                  <Button
                    isLoading={editLoading}
                    variant="shadow"
                    className="bg-green-600 text-white shadow-green-200"
                    onClick={handleSubmit(editPointHandler)}
                  >
                    Edit point
                  </Button>
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* delete point modal */}
      <Modal
        classNames={{ backdrop: "z-[999]", wrapper: "z-[9999]" }}
        isOpen={deleteModal}
        size="xs"
        onClose={() => setDeleteModal(false)}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Delete point
              </ModalHeader>
              <ModalBody>
                <div className="flex w-full gap-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    className="size-7 text-red-600"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
                    />
                  </svg>

                  <span>Are you sure you want to delete this point?</span>
                </div>
              </ModalBody>

              <ModalFooter>
                <div className="flex w-full justify-center gap-4">
                  <Button
                    color="danger"
                    variant="light"
                    onPress={() => setDeleteModal(false)}
                  >
                    Close
                  </Button>
                  <Button
                    isLoading={deleteLoading}
                    variant="shadow"
                    className="bg-red-600 text-white shadow-red-200"
                    onPress={deletePointHandler}
                  >
                    Delete point
                  </Button>
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* settings modal */}
      <Modal
        classNames={{ backdrop: "z-[999]", wrapper: "z-[9999]" }}
        isOpen={settingsModal}
        onClose={() => setSettingsModal(false)}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Settings
              </ModalHeader>
              <ModalBody>
                <div className="flex w-full flex-col gap-4">
                  <Input
                    isRequired
                    label="Lat"
                    labelPlacement="outside"
                    placeholder="Enter point lat"
                    isInvalid={!!errors.lat_settings}
                    errorMessage="lat is required"
                    {...register("lat_settings", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Lng"
                    labelPlacement="outside"
                    placeholder="Enter point lng"
                    isInvalid={!!errors.lng_settings}
                    errorMessage="lng is required"
                    {...register("lng_settings", { required: true })}
                  />

                  <Input
                    isRequired
                    label="Zoom"
                    labelPlacement="outside"
                    placeholder="Enter map zoom"
                    isInvalid={!!errors.zoom}
                    errorMessage="zoom is required"
                    {...register("zoom", { required: true })}
                  />
                </div>
              </ModalBody>
              <ModalFooter>
                <div className="flex w-full justify-center gap-4">
                  <Button
                    color="danger"
                    variant="light"
                    onClick={() => setSettingsModal(false)}
                  >
                    Close
                  </Button>
                  <Button
                    isLoading={settingsUpdateLoading}
                    variant="shadow"
                    className="bg-green-600 text-white shadow-green-200"
                    onClick={handleSubmit(updateSettingsHandler)}
                  >
                    Save
                  </Button>
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* download tiles modal */}
      <Modal
        classNames={{ backdrop: "z-[999]", wrapper: "z-[9999]" }}
        isOpen={progress > 0 && total > 0}
        onClose={progress === total}
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                Tiles Downloading
              </ModalHeader>
              <ModalBody>
                <div className="flex w-full items-center justify-between gap-2 text-sm">
                  <span>Total Tiles : {total}</span>
                  <span>Downloaded Tiles : {progress}</span>

                  {/* <div className="w-full h-5 rounded-full bg-gray-200">
                    <div
                      style={{ width: `${total / progress}%` }}
                      className="text-xs text-white h-full bg-indigo-600 rounded-full flex justify-center items-center"
                    >
                      {progress}%
                    </div>
                  </div> */}
                </div>
              </ModalBody>
              <ModalFooter>
                <div className="flex w-full justify-center gap-4">
                  <Spinner size="" label="Please wait..." />
                </div>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* map & markers */}
      <div className={"relative size-full"}>
        {loading || settingsLoading ? (
          <div className="flex size-full items-center justify-center bg-gray-50">
            <Spinner label="please wait..." />
          </div>
        ) : (
          <MapContainer
            center={
              settings?.lat
                ? [settings.lat, settings.lng]
                : [35.695246913723636, 51.41011318883557]
            }
            zoom={settings?.zoom ? settings?.zoom : 13}
            scrollWheelZoom={true}
            ref={setMap}
          >
            <TileLayer
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
              url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            />

            {points.length > 0 &&
              points.map(
                (point) =>
                  point.status === "active" && (
                    <Marker
                      key={point._id}
                      icon={PointIcon}
                      position={[point.lat, point.lng]}
                      eventHandlers={{
                        mouseover: (e) => {
                          setPointLabel(point);
                        },

                        mouseout: (e) => {
                          setPointLabel({});
                        },
                      }}
                    >
                      <Popup>
                        <div className="flex w-full flex-col gap-1">
                          <span>name: {point.name}</span>
                          <span>lat: {point.lat}</span>
                          <span>lng: {point.lng}</span>
                          <span>frequency: {point.frequency}</span>
                          <span>status: {point.status}</span>

                          <div className="mt-2 flex w-full items-center justify-center gap-3">
                            <button
                              onClick={() => setPointEditableData(point)}
                              className="cursor-pointer text-lg text-default-400 active:opacity-50"
                            >
                              <EditIcon />
                            </button>

                            <button
                              onClick={() => {
                                setDeleteModal(true);
                                setPointId(point._id);
                              }}
                              className="cursor-pointer text-lg text-danger active:opacity-50"
                            >
                              <DeleteIcon />
                            </button>

                            <button
                              onClick={() => changeStatusHandler(point._id)}
                              className="cursor-pointer text-lg text-warning active:opacity-50"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                strokeWidth="1.5"
                                stroke="currentColor"
                                className="size-5"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88"
                                />
                              </svg>
                            </button>
                          </div>
                        </div>
                      </Popup>
                    </Marker>
                  ),
              )}
          </MapContainer>
        )}

        {pointLabel?.lat && (
          <div
            className={
              "absolute bottom-4 right-4 z-[999] flex flex-col gap-1 rounded-lg bg-white p-2 text-xs transition-all duration-300"
            }
          >
            <span>lat: {pointLabel?.lat}</span>
            <span>lng: {pointLabel?.lng}</span>
          </div>
        )}
      </div>

      <div
        className={`mt-3 flex w-full flex-col ${
          showPointList ? "h-2/5" : "h-0 overflow-hidden"
        } transition-all duration-300`}
      >
        {/* toolbar */}
        <div className="flex w-full items-center justify-between px-4">
          <div className="flex justify-center gap-16">
            <Input
              isRequired
              className="w-80"
              labelPlacement="outside"
              placeholder="search point..."
              value={searchVal}
              {...register("search")}
              endContent={
                <div className="flex gap-3">
                  {searchVal?.length > 0 && (
                    <button
                      onClick={() => {
                        setPointsList(points);
                        setValue("search", "");
                      }}
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        strokeWidth="1.5"
                        stroke="currentColor"
                        className="size-5 text-red-600"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M6 18 18 6M6 6l12 12"
                        />
                      </svg>
                    </button>
                  )}
                  <button onClick={searchPointsHandler}>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth="1.5"
                      stroke="currentColor"
                      className="size-5 text-indigo-600"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
                      />
                    </svg>
                  </button>
                </div>
              }
              size="md"
            />
          </div>

          <div className="flex flex-row-reverse gap-4">
            <DateRangePicker
              aria-label="filter by date"
              value={date}
              onChange={setDate}
              hideTimeZone
              defaultValue={
                {
                  // start: parseAbsoluteToLocal("2024-04-01T07:45:00Z"),
                  // end: parseAbsoluteToLocal("2024-04-14T19:15:00Z"),
                }
              }
            />

            <TimeInput
              label="to"
              value={to}
              onChange={setTo}
              labelPlacement="outside-left"
            />

            <TimeInput
              label="from"
              value={from}
              onChange={setFrom}
              labelPlacement="outside-left"
            />

            <Button
              onClick={sortByDateHandler}
              variant="shadow"
              className="bg-indigo-600 text-white shadow-indigo-200"
            >
              Filter
            </Button>

            {date.start && (
              <button
                onClick={() => {
                  setPointsList(points);
                  setDate({});
                  setFrom("");
                  setTo("");
                }}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="size-5 text-red-600"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 18 18 6M6 6l12 12"
                  />
                </svg>
              </button>
            )}
          </div>

          <div className="flex flex-row-reverse items-center gap-4">
            {/* settings */}
            <button
              onClick={openSettingsModal}
              className="flex size-10 items-center justify-center rounded-xl bg-red-600 text-white shadow-lg shadow-red-200 outline-none transition-all duration-300 active:scale-95"
            >
              {settingsLoading ? (
                <Spinner size="sm" color="white" />
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="size-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z"
                  />
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
                  />
                </svg>
              )}
            </button>

            {/* refresh data */}
            <button
              onClick={() => {
                setRotateIcon(true);

                getAllPoints();
              }}
              className="flex size-10 items-center justify-center rounded-xl bg-gray-100 text-gray-600 shadow-lg shadow-gray-200 transition-all duration-300 active:scale-95"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="1.5"
                stroke="currentColor"
                className={`size-5 ${rotateIcon && "spinner-anim"}`}
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"
                />
              </svg>
            </button>
          </div>
        </div>

        <Table
          classNames={{ wrapper: "bg-transparent shadow-none rounded-none" }}
          className="max-h-fit"
          aria-label="Example table with custom cells"
        >
          <TableHeader columns={columns}>
            {(column) => (
              <TableColumn key={column.uid} align="center">
                {column.name}
              </TableColumn>
            )}
          </TableHeader>
          <TableBody
            loadingContent={<Spinner label="Loading..." />}
            isLoading={loading}
            items={pointsList}
            emptyContent="doesn't exist any point  !"
          >
            {(item) => (
              <TableRow key={item._id}>
                {(columnKey) => (
                  <TableCell>
                    {renderCell(
                      item,
                      columnKey,
                      pointsList.findIndex((p) => p._id === item._id) + 1,
                    )}
                  </TableCell>
                )}
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

// File: src/components/map/PointIcon.tsx
import L from "leaflet";

const PointIcon = new L.Icon({
  iconUrl: "/assets/icon.png",
  iconRetinaUrl: "/assets/icon.png",
  iconAnchor: undefined,
  shadowUrl: undefined,
  shadowSize: undefined,
  shadowAnchor: undefined,
  iconSize: new L.Point(60, 60),
  className: "",
});

export { PointIcon };

// File: src/components/map/Modals.tsx
import React from "react";
import {
  Button,
  Input,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
  Spinner,
} from "@nextui-org/react";
import { useForm } from "react-hook-form";
import { FormData } from "@/types";

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: FormData) => void;
  loading: boolean;
  initialData?: FormData;
}

const ModalComponent: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  loading,
  initialData,
}) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({
    defaultValues: initialData,
  });

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <ModalContent>
        <ModalHeader>Add or Edit Point</ModalHeader>
        <ModalBody>
          <Input
            isRequired
            label="Name"
            {...register("name", { required: true })}
            errorMessage={errors.name ? "Name is required" : undefined}
          />
          <Input
            isRequired
            label="Latitude"
            {...register("lat", { required: true })}
            errorMessage={errors.lat ? "Latitude is required" : undefined}
          />
          <Input
            isRequired
            label="Longitude"
            {...register("lng", { required: true })}
            errorMessage={errors.lng ? "Longitude is required" : undefined}
          />
          <Input
            isRequired
            label="Frequency"
            {...register("frequency", { required: true })}
            errorMessage={
              errors.frequency ? "Frequency is required" : undefined
            }
          />
        </ModalBody>
        <ModalFooter>
          <Button onPress={onClose}>Close</Button>
          <Button onPress={handleSubmit(onSubmit)} isLoading={loading}>
            {loading ? <Spinner /> : "Submit"}
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default ModalComponent;

// File: src/components/map/EditIcon.tsx
import React from "react";

export const EditIcon = () => (
  <svg
    aria-hidden="true"
    fill="none"
    focusable="false"
    height="1em"
    role="presentation"
    viewBox="0 0 20 20"
    width="1em"
  >
    <path
      d="M11.05 3.00002L4.20835 10.2417C3.95002 10.5167 3.70002 11.0584 3.65002 11.4334L3.34169 14.1334C3.23335 15.1084 3.93335 15.775 4.90002 15.6084L7.58335 15.15C7.95835 15.0834 8.48335 14.8084 8.74168 14.525L15.5834 7.28335C16.7667 6.03335 17.3 4.60835 15.4583 2.86668C13.625 1.14168 12.2334 1.75002 11.05 3.00002Z"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={1.5}
    />
    <path
      d="M9.90833 4.20831C10.2667 6.50831 12.1333 8.26665 14.45 8.49998"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={1.5}
    />
    <path
      d="M2.5 18.3333H17.5"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeMiterlimit={10}
      strokeWidth={1.5}
    />
  </svg>
);

// File: src/components/sidebar/Sidebar.tsx
import React, { useState } from "react";
import Image from "next/image";

export default function Sidebar({
  setAddPointModal,
  showPointList,
  setShowPointList,
}: {
  setAddPointModal: (value: boolean) => void;
  showPointList: boolean;
  setShowPointList: (value: boolean) => void;
}) {
  const [openSidebar, setOpenSidebar] = useState(false);

  return (
    <div
      className={`${openSidebar ? "min-w-60" : "min-w-16"} relative transition-all duration-300`}
    >
      <div
        className={`${openSidebar ? "min-w-60 p-5" : "min-w-16 p-2"} fixed bottom-0 flex h-full flex-col items-center gap-4 bg-indigo-100 pt-3 transition-all  duration-300`}
      >
        <button
          onClick={() => setOpenSidebar(!openSidebar)}
          className="flex size-10 items-center justify-center rounded-xl bg-indigo-200 text-indigo-600"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className="size-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
            />
          </svg>
        </button>

        <div className="my-10 flex h-auto w-full items-center justify-center">
          <Image
            src="/assets/logo.png"
            width={0}
            height={0}
            sizes="100vw"
            className={`${openSidebar ? "w-20" : "w-10"} object-cover`}
            alt=""
            priority
          />
        </div>

        <button
          onClick={() => setAddPointModal(true)}
          className={`${openSidebar ? "h-14 w-full px-4" : "h-10  w-10 justify-center"} flex items-center gap-2 overflow-hidden rounded-xl bg-indigo-200 font-bold text-indigo-600 transition-all duration-300`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className={`${openSidebar ? "size-6" : "size-5"}`}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
            />
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1 1 15 0Z"
            />
          </svg>

          {openSidebar && <span>Add new point</span>}
        </button>

        <button
          onClick={() => setShowPointList(!showPointList)}
          className={`${openSidebar ? "h-14 w-full px-4" : "h-10  w-10 justify-center"} flex items-center gap-2 overflow-hidden rounded-xl bg-indigo-200 font-bold text-indigo-600 transition-all duration-300`}
        >
          {showPointList ? (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className={`${openSidebar ? "size-6" : "size-5"}`}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L9.88 9.88"
              />
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className={`${openSidebar ? "size-6" : "size-5"}`}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z"
              />
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
              />
            </svg>
          )}

          {openSidebar && (
            <span>
              {showPointList ? "Hide points list" : "Show points list"}
            </span>
          )}
        </button>
      </div>
    </div>
  );
}

// File: services/API.ts
import axios from "axios";

const servicesApi = axios.create({
  withCredentials: false,
  timeout: 60000,
  headers: {
    common: {
      Accept: "application/json",
    },
  },
});

export const postData = async (
  param: string,
  data: any,
  withToken: boolean = false,
) => {
  if (withToken) {
    const token = localStorage.getItem("token");
    return servicesApi.post(param, data, {
      headers: { Authorization: `Bearer ${token}` },
    });
  }
  return servicesApi.post(param, data);
};

export const getData = async (
  param: string,
  data: any,
  withToken: boolean = false,
) => {
  if (withToken) {
    const token = localStorage.getItem("token");
    return servicesApi.get(param, {
      params: data,
      headers: { Authorization: `Bearer ${token}` },
    });
  }
  return servicesApi.get(param, { params: data });
};

export const deleteData = async (
  param: string,
  data: any,
  withToken: boolean = false,
) => {
  if (withToken) {
    const token = localStorage.getItem("token");
    return servicesApi.delete(param, {
      headers: { Authorization: `Bearer ${token}` },
      data,
    });
  }
  return servicesApi.delete(param, { data });
};

// File: models/SettingsModel.ts
import mongoose from "mongoose";

const schema = new mongoose.Schema({
  lat: { type: Number, required: true, default: 35.694523130867424 },
  lng: { type: Number, required: true, default: 51.30922197948697 },
  zoom: { type: Number, required: true, default: 13 },
});

const SettingsModel =
  mongoose.models.SettingsModel || mongoose.model("SettingsModel", schema);

export default SettingsModel;

// File: models/MapModel.ts
import mongoose from "mongoose";

const schema = new mongoose.Schema({
  name: { type: String, required: true },
  lat: { type: Number, required: true },
  lng: { type: Number, required: true },
  frequency: { type: Number, required: true },
  status: { type: String, default: "active" },
  date: { type: Date, default: () => Date.now() },
  deletedAt: { type: mongoose.Schema.Types.Mixed, default: null },
});

const MapModel = mongoose.models.MapModel || mongoose.model("MapModel", schema);

export default MapModel;

// File: configs/db.ts
import mongoose from "mongoose";

const connectDB = async () => {
  try {
    if (mongoose.connections[0].readyState) {
      return true;
    } else {
      await mongoose.connect(process.env.MONGO_URL!);
      console.log("Database connected successfully");
    }
  } catch (err) {
    console.error(err);
  }
};

export default connectDB;

